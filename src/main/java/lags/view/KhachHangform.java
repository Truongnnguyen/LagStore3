/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package lags.view;

/**
 *
 * @author admin
 */
import lags.controller.KhachHangController;
import lags.entity.KhachHang;
import java.util.List;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

public class KhachHangform extends javax.swing.JPanel {
private final KhachHangController controller = new KhachHangController();
private DefaultTableModel model;
private boolean isUpdatingCombo = false; 

    /**
     * Creates new form KhachHangform
     */
    public KhachHangform() {
        initComponents();
            initCustom();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbo_Tenkhachhang = new javax.swing.JComboBox<>();
        txtMakhachhang = new javax.swing.JTextField();
        txtsdt = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtDiaChi = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        NutThem = new javax.swing.JButton();
        NutSua = new javax.swing.JButton();
        NutXoa = new javax.swing.JButton();

        jTextField1.setText("jTextField1");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Khách hàng");

        jLabel2.setText("Tên khách hàng:");

        jLabel3.setText("Mã Khách Hàng:");

        jLabel4.setText("Địa Chỉ: ");

        jLabel5.setText("SĐT:");

        jLabel6.setText("Email: ");

        cbo_Tenkhachhang.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbo_Tenkhachhang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbo_TenkhachhangActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MaKH", "TenKH", "DiaChi", "Sdt", "Email"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        NutThem.setText("Thêm");
        NutThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NutThemActionPerformed(evt);
            }
        });

        NutSua.setText("Sửa");
        NutSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NutSuaActionPerformed(evt);
            }
        });

        NutXoa.setText("Xóa");
        NutXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NutXoaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(229, 229, 229)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel6))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtEmail)
                                    .addComponent(txtsdt)
                                    .addComponent(txtMakhachhang)
                                    .addComponent(cbo_Tenkhachhang, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtDiaChi))))))
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(NutThem)
                    .addComponent(NutSua)
                    .addComponent(NutXoa))
                .addGap(332, 332, 332))
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(cbo_Tenkhachhang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtMakhachhang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addComponent(NutThem)
                                .addGap(18, 18, 18)
                                .addComponent(NutSua)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(txtDiaChi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(17, 17, 17))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(NutXoa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtsdt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(90, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbo_TenkhachhangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbo_TenkhachhangActionPerformed
         if (isUpdatingCombo) return;
    String ten = (String) cbo_Tenkhachhang.getSelectedItem();
    if (ten == null) return;
    for (int i = 0; i < model.getRowCount(); i++) {
        if (ten.equals(model.getValueAt(i, 1))) {
            jTable1.setRowSelectionInterval(i, i);
            jTable1.scrollRectToVisible(jTable1.getCellRect(i, 0, true));
            txtMakhachhang.setText(model.getValueAt(i, 0).toString());
            txtDiaChi.setText(model.getValueAt(i, 2).toString());
            txtsdt.setText(model.getValueAt(i, 3) == null ? "" : model.getValueAt(i, 3).toString());
            txtEmail.setText(model.getValueAt(i, 4) == null ? "" : model.getValueAt(i, 4).toString());
            break;
        }}
    }//GEN-LAST:event_cbo_TenkhachhangActionPerformed

    private void NutThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NutThemActionPerformed
        // TODO add your handling code here:
        if (!validateForm()) return;
    try {
        KhachHang kh = buildFromForm();
        if (kh.getMaKH() == null || kh.getMaKH().isBlank()) {
            kh.setMaKH(generateNewId());
            txtMakhachhang.setText(kh.getMaKH());
        }
        controller.save(kh); 
        reloadAndSelect(kh.getMaKH());
        showInfo("Đã lưu khách hàng.");
    } catch (Exception ex) {
        showError("Lỗi lưu: " + ex.getMessage());
    }

    }//GEN-LAST:event_NutThemActionPerformed

    private void NutSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NutSuaActionPerformed
       String ma = txtMakhachhang.getText().trim();
    if (ma.isEmpty()) {
        showError("Chưa chọn khách để sửa.");
        return;
    }
    if (!validateForm()) return;
    try {
        KhachHang kh = buildFromForm();
        controller.save(kh); 
        reloadAndSelect(kh.getMaKH());
        showInfo("Đã cập nhật khách hàng.");
    } catch (Exception ex) {
        showError("Lỗi cập nhật: " + ex.getMessage());
    }
    }//GEN-LAST:event_NutSuaActionPerformed

    private void NutXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NutXoaActionPerformed
       String ma = txtMakhachhang.getText().trim();
    if (ma.isEmpty()) {
        showError("Chưa chọn khách để xóa.");
        return;
    }
    int confirm = JOptionPane.showConfirmDialog(this,
            "Bạn chắc chắn muốn xóa khách hàng " + ma + "?", "Xác nhận",
            JOptionPane.YES_NO_OPTION);
    if (confirm != JOptionPane.YES_OPTION) return;

    try {
        controller.delete(ma);
        reloadAndSelect(null);
        clearForm();
        showInfo("Đã xóa khách hàng.");
    } catch (Exception ex) {
        showError("Xóa thất bại: " + ex.getMessage());
    }
    }//GEN-LAST:event_NutXoaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton NutSua;
    private javax.swing.JButton NutThem;
    private javax.swing.JButton NutXoa;
    private javax.swing.JComboBox<String> cbo_Tenkhachhang;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField txtDiaChi;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtMakhachhang;
    private javax.swing.JTextField txtsdt;
    // End of variables declaration//GEN-END:variables
 private void initCustom() {
        model = (DefaultTableModel) jTable1.getModel();
        jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

        loadTable(null);
        fillCombo();

        jTable1.getSelectionModel().addListSelectionListener(e -> {
            if (e.getValueIsAdjusting()) return;
            int row = jTable1.getSelectedRow();
            if (row >= 0) {
                txtMakhachhang.setText(val(row, 0));
                txtDiaChi.setText(val(row, 2));
                txtsdt.setText(val(row, 3));
                txtEmail.setText(val(row, 4));
                isUpdatingCombo = true;
                cbo_Tenkhachhang.setSelectedItem(val(row, 1));
                isUpdatingCombo = false;
            }
        });
    }

    private void onComboTen() {
        if (isUpdatingCombo) return;
        String ten = (String) cbo_Tenkhachhang.getSelectedItem();
        if (ten == null) return;
        for (int i = 0; i < model.getRowCount(); i++) {
            if (ten.equals(model.getValueAt(i, 1))) {
                jTable1.setRowSelectionInterval(i, i);
                jTable1.scrollRectToVisible(jTable1.getCellRect(i, 0, true));
                break;
            }
        }
    }

    private void saveCustomer() {
        if (!validateForm()) return;
        try {
            KhachHang kh = buildFromForm();
            if (kh.getMaKH().isBlank()) {
                kh.setMaKH(generateNewId());
                txtMakhachhang.setText(kh.getMaKH());
            }
            controller.save(kh);
            reloadAndSelect(kh.getMaKH());
            showInfo("Đã lưu khách hàng.");
        } catch (Exception ex) {
            showError(ex.getMessage());
        }
    }

    private void updateCustomer() {
        if (txtMakhachhang.getText().trim().isEmpty()) {
            showError("Chưa chọn khách để sửa.");
            return;
        }
        if (!validateForm()) return;
        try {
            KhachHang kh = buildFromForm();
            controller.save(kh); 
            reloadAndSelect(kh.getMaKH());
            showInfo("Đã cập nhật.");
        } catch (Exception ex) {
            showError(ex.getMessage());
        }
    }

    private void deleteCustomer() {
        String ma = txtMakhachhang.getText().trim();
        if (ma.isEmpty()) {
            showError("Chưa chọn khách để xóa.");
            return;
        }
        if (JOptionPane.showConfirmDialog(this,
                "Xóa khách hàng " + ma + "?", "Xác nhận",
                JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) return;
        try {
            controller.delete(ma);
            reloadAndSelect(null);
            clearForm();
            showInfo("Đã xóa.");
        } catch (Exception ex) {
            showError(ex.getMessage());
        }
    }

    private void clearForm() {
        txtMakhachhang.setText("");
        txtDiaChi.setText("");
        txtsdt.setText("");
        txtEmail.setText("");
        if (cbo_Tenkhachhang.getItemCount() > 0) cbo_Tenkhachhang.setSelectedIndex(0);
        jTable1.clearSelection();
    }

    private void loadTable(String keyword) {
        model.setRowCount(0);
        try {
            List<KhachHang> list = controller.list(keyword);
            for (KhachHang k : list) {
                model.addRow(new Object[]{
                        k.getMaKH(), k.getTenKH(), k.getDiaChi(),
                        k.getSoDienThoai(), k.getEmail()
                });
            }
        } catch (Exception ex) {
            showError("Lỗi tải dữ liệu: " + ex.getMessage());
        }
    }

    private void fillCombo() {
        cbo_Tenkhachhang.removeAllItems();
        try {
            for (KhachHang k : controller.list(null)) {
                cbo_Tenkhachhang.addItem(k.getTenKH());
            }
        } catch (Exception ex) {
            showError("Lỗi load combo: " + ex.getMessage());
        }
    }

    private void reloadAndSelect(String maKH) {
        loadTable(null);
        fillCombo();
        if (maKH != null) {
            for (int i = 0; i < model.getRowCount(); i++) {
                if (maKH.equals(model.getValueAt(i, 0))) {
                    jTable1.setRowSelectionInterval(i, i);
                    jTable1.scrollRectToVisible(jTable1.getCellRect(i, 0, true));
                    break;
                }
            }
        }
    }

    private String generateNewId() {
        int max = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            String id = model.getValueAt(i, 0).toString();
            String num = id.replaceAll("\\D", "");
            if (!num.isEmpty()) {
                max = Math.max(max, Integer.parseInt(num));
            }
        }
        return "KH" + (max + 1);
    }

    private KhachHang buildFromForm() {
        KhachHang kh = new KhachHang();
        kh.setMaKH(txtMakhachhang.getText().trim());
        kh.setTenKH(cbo_Tenkhachhang.getSelectedItem() != null
                ? cbo_Tenkhachhang.getSelectedItem().toString().trim()
                : "");
        kh.setDiaChi(txtDiaChi.getText().trim());
        kh.setSoDienThoai(txtsdt.getText().trim());
        kh.setEmail(txtEmail.getText().trim());
        return kh;
    }

    private boolean validateForm() {
        if (cbo_Tenkhachhang.getSelectedItem() == null ||
                cbo_Tenkhachhang.getSelectedItem().toString().trim().isEmpty()) {
            showError("Tên khách hàng bắt buộc.");
            cbo_Tenkhachhang.requestFocus();
            return false;
        }
        String sdt = txtsdt.getText().trim();
        if (!sdt.isEmpty() && !sdt.matches("^0\\d{9}$")) {
            showError("SĐT phải 10 số bắt đầu bằng 0.");
            txtsdt.requestFocus();
            return false;
        }
        String email = txtEmail.getText().trim();
        if (!email.isEmpty() && !email.matches("^[\\w.+\\-]+@[\\w\\-]+\\.[A-Za-z]{2,}$")) {
            showError("Email không hợp lệ.");
            txtEmail.requestFocus();
            return false;
        }
        return true;
    }

    private String val(int row, int col) {
        Object o = model.getValueAt(row, col);
        return o == null ? "" : o.toString();
    }

    private void showError(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Lỗi", JOptionPane.ERROR_MESSAGE);
    }

    private void showInfo(String msg) {
        JOptionPane.showMessageDialog(this, msg, "Thông báo", JOptionPane.INFORMATION_MESSAGE);
    }
    
}
